-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.activity_logs
(
    id bigserial NOT NULL,
    "user" character varying(191) COLLATE pg_catalog."default",
    action character varying(191) COLLATE pg_catalog."default" NOT NULL,
    type character varying(191) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT activity_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.announcements
(
    id bigserial NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    target_roles json,
    created_by bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT announcements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.api_keys
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    label character varying(191) COLLATE pg_catalog."default",
    key character varying(191) COLLATE pg_catalog."default" NOT NULL,
    active boolean NOT NULL DEFAULT true,
    last_used_at timestamp(0) without time zone,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT api_keys_pkey PRIMARY KEY (id),
    CONSTRAINT api_keys_key_unique UNIQUE (key)
);

CREATE TABLE IF NOT EXISTS public.cache
(
    key character varying(191) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.cache_locks
(
    key character varying(191) COLLATE pg_catalog."default" NOT NULL,
    owner character varying(191) COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_locks_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id bigserial NOT NULL,
    organizer_id bigint NOT NULL,
    title character varying(175) COLLATE pg_catalog."default" NOT NULL,
    event_type character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Conference'::character varying,
    image character varying(175) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    venue character varying(175) COLLATE pg_catalog."default" NOT NULL,
    capacity integer NOT NULL,
    ticket_price numeric(10, 2) NOT NULL,
    location character varying(175) COLLATE pg_catalog."default" NOT NULL,
    start_date timestamp(0) without time zone NOT NULL,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.feedback
(
    id bigserial NOT NULL,
    event_id bigint NOT NULL,
    attendee_id bigint NOT NULL,
    rating smallint,
    comment text COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT feedback_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.logs
(
    id bigserial NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    user_id bigint,
    event_id bigint,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.migrations
(
    id serial NOT NULL,
    migration character varying(191) COLLATE pg_catalog."default" NOT NULL,
    batch integer NOT NULL,
    CONSTRAINT migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    subject character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    sent_at timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.orders
(
    id bigserial NOT NULL,
    user_id bigint,
    event_id bigint,
    total_amount numeric(10, 2) NOT NULL DEFAULT '0'::numeric,
    status character varying(191) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    email character varying(191) COLLATE pg_catalog."default" NOT NULL,
    token character varying(191) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id bigserial NOT NULL,
    ticket_id bigint NOT NULL,
    amount numeric(10, 2) NOT NULL,
    method character varying(255) COLLATE pg_catalog."default" NOT NULL,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    transaction_id character varying(191) COLLATE pg_catalog."default",
    otp_verified boolean NOT NULL DEFAULT false,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT payments_pkey PRIMARY KEY (id),
    CONSTRAINT payments_transaction_id_unique UNIQUE (transaction_id)
);

CREATE TABLE IF NOT EXISTS public.permission_role
(
    permission_id bigint NOT NULL,
    role_id bigint NOT NULL,
    CONSTRAINT permission_role_pkey PRIMARY KEY (permission_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.permissions
(
    id bigserial NOT NULL,
    name character varying(191) COLLATE pg_catalog."default" NOT NULL,
    description character varying(191) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT permissions_pkey PRIMARY KEY (id),
    CONSTRAINT permissions_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.personal_access_tokens
(
    id bigserial NOT NULL,
    tokenable_type character varying(191) COLLATE pg_catalog."default" NOT NULL,
    tokenable_id bigint NOT NULL,
    name character varying(191) COLLATE pg_catalog."default" NOT NULL,
    token character varying(64) COLLATE pg_catalog."default" NOT NULL,
    abilities text COLLATE pg_catalog."default",
    last_used_at timestamp(0) without time zone,
    expires_at timestamp(0) without time zone,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT personal_access_tokens_pkey PRIMARY KEY (id),
    CONSTRAINT personal_access_tokens_token_unique UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS public.reports
(
    id bigserial NOT NULL,
    event_id bigint NOT NULL,
    organizer_id bigint NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    format character varying(255) COLLATE pg_catalog."default" NOT NULL,
    generated_at timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    file_path character varying(191) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT reports_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role_user
(
    role_id bigint NOT NULL,
    user_id bigint NOT NULL,
    CONSTRAINT role_user_pkey PRIMARY KEY (role_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id bigserial NOT NULL,
    name character varying(191) COLLATE pg_catalog."default" NOT NULL,
    description character varying(191) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_unique UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    id character varying(191) COLLATE pg_catalog."default" NOT NULL,
    user_id bigint,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    payload text COLLATE pg_catalog."default" NOT NULL,
    last_activity integer NOT NULL,
    CONSTRAINT sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.settings
(
    id bigserial NOT NULL,
    key character varying(191) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT settings_pkey PRIMARY KEY (id),
    CONSTRAINT settings_key_unique UNIQUE (key)
);

CREATE TABLE IF NOT EXISTS public.support_tickets
(
    id bigserial NOT NULL,
    user_id bigint,
    subject character varying(191) COLLATE pg_catalog."default" NOT NULL,
    status character varying(191) COLLATE pg_catalog."default" NOT NULL DEFAULT 'open'::character varying,
    description text COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT support_tickets_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tickets
(
    id bigserial NOT NULL,
    event_id bigint NOT NULL,
    attendee_id bigint NOT NULL,
    qr_code character varying(191) COLLATE pg_catalog."default" NOT NULL,
    purchase_date timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'valid'::character varying,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    ticket_code character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tickets_pkey PRIMARY KEY (id),
    CONSTRAINT tickets_qr_code_unique UNIQUE (qr_code),
    CONSTRAINT tickets_ticket_code_unique UNIQUE (ticket_code)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(191) COLLATE pg_catalog."default" NOT NULL,
    password character varying(191) COLLATE pg_catalog."default" NOT NULL,
    role character varying(255) COLLATE pg_catalog."default" NOT NULL,
    is_suspended boolean NOT NULL DEFAULT false,
    phone character varying(30) COLLATE pg_catalog."default",
    company_name character varying(255) COLLATE pg_catalog."default",
    notification_preferences json,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    google2fa_secret character varying(191) COLLATE pg_catalog."default",
    google2fa_enabled boolean NOT NULL DEFAULT false,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_unique UNIQUE (email)
);

ALTER TABLE IF EXISTS public.announcements
    ADD CONSTRAINT announcements_created_by_foreign FOREIGN KEY (created_by)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.api_keys
    ADD CONSTRAINT api_keys_user_id_foreign FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_organizer_id_foreign FOREIGN KEY (organizer_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_attendee_id_foreign FOREIGN KEY (attendee_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_event_id_foreign FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.logs
    ADD CONSTRAINT logs_event_id_foreign FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.logs
    ADD CONSTRAINT logs_user_id_foreign FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_foreign FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_ticket_id_foreign FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.permission_role
    ADD CONSTRAINT permission_role_permission_id_foreign FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.permission_role
    ADD CONSTRAINT permission_role_role_id_foreign FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reports
    ADD CONSTRAINT reports_event_id_foreign FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reports
    ADD CONSTRAINT reports_organizer_id_foreign FOREIGN KEY (organizer_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.role_user
    ADD CONSTRAINT role_user_role_id_foreign FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.role_user
    ADD CONSTRAINT role_user_user_id_foreign FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_attendee_id_foreign FOREIGN KEY (attendee_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_event_id_foreign FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;