name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Testing and Linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: event_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          NODE_ENV: test

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -U postgres; do sleep 1; done
        env:
          PGPASSWORD: postgres

      - name: Create test database
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE event_management_test;"
        env:
          PGPASSWORD: postgres

      - name: Load database schema
        run: |
          psql -h localhost -U postgres -d event_management_test -f backend/database/migrations/schema.sql
        env:
          PGPASSWORD: postgres

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: event_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          NODE_ENV: test

      - name: Run backend linting
        run: |
          cd backend
          npm run lint

  # Frontend Testing and Building
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: eventfrontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd eventfrontend
          npm ci

      - name: Run frontend tests
        run: |
          cd eventfrontend
          npm test

      - name: Run frontend linting
        run: |
          cd eventfrontend
          npm run lint

      - name: Build frontend
        run: |
          cd eventfrontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level moderate

      - name: Run npm audit (Frontend)
        run: |
          cd eventfrontend
          npm audit --audit-level moderate

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://your-staging-app.herokuapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

      - name: Setup Heroku CLI
        run: |
          # Install Heroku CLI using the official method
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
          
          # Find where heroku was installed and verify
          which heroku
          heroku --version
          
          # Login to Heroku using environment variable
          export HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}
          echo "HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}" >> $GITHUB_ENV
          
          # Create .netrc for git operations
          cat > ~/.netrc <<EOF
          machine api.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          machine git.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          EOF
          chmod 600 ~/.netrc
          
          # Test authentication
          heroku auth:whoami

      - name: Deploy to Heroku Staging
        run: |
          # Configure Git identity
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          git config --global init.defaultBranch main
          
          cd backend
          
          # Initialize git repository
          git init
          git add .
          git commit -m "Deploy to staging"
          
          # Create Heroku app (ignore if exists)
          heroku create your-event-app-staging || echo "App already exists"
          
          # Add Heroku git remote
          heroku git:remote -a your-event-app-staging
          
          # Push to Heroku
          git push heroku main --force
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          
      - name: Configure Heroku Environment Variables
        run: |
          heroku config:set \
            DB_HOST="${{ secrets.STAGING_DB_HOST }}" \
            DB_USER="${{ secrets.STAGING_DB_USER }}" \
            DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}" \
            DB_NAME="${{ secrets.STAGING_DB_NAME }}" \
            JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            PAYSTACK_SECRET_KEY="${{ secrets.STAGING_PAYSTACK_SECRET_KEY }}" \
            NODE_ENV=staging \
            --app your-event-app-staging
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

  # Deploy to production (only on main branch with manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-production-app.herokuapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

      - name: Setup Heroku CLI
        run: |
          # Install Heroku CLI using the official method
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
          
          # Find where heroku was installed and verify
          which heroku
          heroku --version
          
          # Login to Heroku using environment variable
          export HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}
          echo "HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}" >> $GITHUB_ENV
          
          # Create .netrc for git operations
          cat > ~/.netrc <<EOF
          machine api.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          machine git.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          EOF
          chmod 600 ~/.netrc
          
          # Test authentication
          heroku auth:whoami

      - name: Deploy to Heroku Production
        run: |
          # Configure Git identity
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          git config --global init.defaultBranch main
          
          cd backend
          
          # Initialize git repository
          git init
          git add .
          git commit -m "Deploy to production"
          
          # Create Heroku app (ignore if exists)
          heroku create your-event-app-production || echo "App already exists"
          
          # Add Heroku git remote
          heroku git:remote -a your-event-app-production
          
          # Push to Heroku
          git push heroku main --force
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          
      - name: Configure Heroku Environment Variables
        run: |
          heroku config:set \
            DB_HOST="${{ secrets.PRODUCTION_DB_HOST }}" \
            DB_USER="${{ secrets.PRODUCTION_DB_USER }}" \
            DB_PASSWORD="${{ secrets.PRODUCTION_DB_PASSWORD }}" \
            DB_NAME="${{ secrets.PRODUCTION_DB_NAME }}" \
            JWT_SECRET="${{ secrets.PRODUCTION_JWT_SECRET }}" \
            PAYSTACK_SECRET_KEY="${{ secrets.PRODUCTION_PAYSTACK_SECRET_KEY }}" \
            NODE_ENV=production \
            --app your-event-app-production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
