name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Testing and Linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: event_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          NODE_ENV: test

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -U postgres; do sleep 1; done
        env:
          PGPASSWORD: postgres

      - name: Create test database
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE event_management_test;"
        env:
          PGPASSWORD: postgres

      - name: Load database schema
        run: |
          psql -h localhost -U postgres -d event_management_test -f backend/database/migrations/schema.sql
        env:
          PGPASSWORD: postgres

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: event_management_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-jwt-secret-key-for-github-actions
          NODE_ENV: test

      - name: Run backend linting
        run: |
          cd backend
          npm run lint

  # Frontend Testing and Building
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: eventfrontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd eventfrontend
          npm ci

      - name: Run frontend tests
        run: |
          cd eventfrontend
          npm test

      - name: Run frontend linting
        run: |
          cd eventfrontend
          npm run lint

      - name: Build frontend
        run: |
          cd eventfrontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level moderate

      - name: Run npm audit (Frontend)
        run: |
          cd eventfrontend
          npm audit --audit-level moderate

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://your-staging-app.herokuapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

      - name: Deploy to Heroku Staging
        uses: AkhileshNS/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "your-event-app-staging"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          appdir: "backend"
          procfile: "web: npm start"
          healthcheck: "https://your-event-app-staging.herokuapp.com/health"
          checkstring: "ok"
          delay: 5
        env:
          HD_DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          HD_DB_USER: ${{ secrets.STAGING_DB_USER }}
          HD_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          HD_DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          HD_JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          HD_PAYSTACK_SECRET_KEY: ${{ secrets.STAGING_PAYSTACK_SECRET_KEY }}

  # Deploy to production (only on main branch with manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-production-app.herokuapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: eventfrontend/dist

      - name: Deploy to Heroku Production
        uses: AkhileshNS/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "your-event-app-production"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          appdir: "backend"
          procfile: "web: npm start"
          healthcheck: "https://your-event-app-production.herokuapp.com/health"
          checkstring: "ok"
          delay: 5
        env:
          HD_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          HD_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          HD_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
          HD_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          HD_JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          HD_PAYSTACK_SECRET_KEY: ${{ secrets.PRODUCTION_PAYSTACK_SECRET_KEY }}
