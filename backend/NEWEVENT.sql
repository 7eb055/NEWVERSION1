-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin_activity_logs
(
    log_id serial NOT NULL,
    admin_id integer,
    action character varying(100) COLLATE pg_catalog."default" NOT NULL,
    target_table character varying(50) COLLATE pg_catalog."default",
    target_id integer,
    details jsonb,
    ip_address inet,
    user_agent text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT admin_activity_logs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.admin_notifications
(
    notification_id serial NOT NULL,
    admin_id integer,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" DEFAULT 'info'::character varying,
    is_read boolean DEFAULT false,
    action_url text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT admin_notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.admin_reports
(
    report_id serial NOT NULL,
    admin_id integer,
    report_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    report_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    parameters jsonb,
    file_path text COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    CONSTRAINT admin_reports_pkey PRIMARY KEY (report_id)
);

CREATE TABLE IF NOT EXISTS public.admin_users
(
    admin_id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    full_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    role character varying(50) COLLATE pg_catalog."default" DEFAULT 'admin'::character varying,
    permissions jsonb DEFAULT '{"all": true}'::jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_login timestamp without time zone,
    is_active boolean DEFAULT true,
    is_super_admin boolean DEFAULT false,
    phone character varying(20) COLLATE pg_catalog."default",
    profile_image_url text COLLATE pg_catalog."default",
    CONSTRAINT admin_users_pkey PRIMARY KEY (admin_id),
    CONSTRAINT admin_users_email_key UNIQUE (email),
    CONSTRAINT admin_users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.attendance_log
(
    log_id serial NOT NULL,
    registration_id integer,
    event_id integer,
    check_in_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    check_out_time timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT attendance_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.attendancelogs
(
    attendance_id serial NOT NULL,
    event_id integer NOT NULL,
    registration_id integer NOT NULL,
    check_in_time timestamp without time zone DEFAULT now(),
    check_out_time timestamp without time zone,
    scan_method character varying(20) COLLATE pg_catalog."default" DEFAULT 'qr_code'::character varying,
    scanned_by integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    scanned_by_user_id integer,
    log_id serial NOT NULL,
    CONSTRAINT attendancelogs_registration_id_key UNIQUE (registration_id)
);

CREATE TABLE IF NOT EXISTS public.attendees
(
    attendee_id serial NOT NULL,
    user_id integer NOT NULL,
    full_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(100) COLLATE pg_catalog."default",
    date_of_birth date,
    gender character varying(100) COLLATE pg_catalog."default",
    interests character varying(2000) COLLATE pg_catalog."default",
    emergency_contact_name character varying(1000) COLLATE pg_catalog."default",
    emergency_contact_phone character varying(100) COLLATE pg_catalog."default",
    dietary_restrictions text COLLATE pg_catalog."default",
    accessibility_needs text COLLATE pg_catalog."default",
    profile_picture_url character varying(2000) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    social_media_links text COLLATE pg_catalog."default",
    notification_preferences text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT attendees_pkey PRIMARY KEY (attendee_id),
    CONSTRAINT attendees_user_id_key UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.backup_logs
(
    backup_id serial NOT NULL,
    admin_id integer,
    backup_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    file_path text COLLATE pg_catalog."default",
    file_size bigint,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'in_progress'::character varying,
    started_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    CONSTRAINT backup_logs_pkey PRIMARY KEY (backup_id)
);

CREATE TABLE IF NOT EXISTS public.companies
(
    company_id serial NOT NULL,
    company_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    company_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    category character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address text COLLATE pg_catalog."default",
    contact_info jsonb NOT NULL,
    description text COLLATE pg_catalog."default",
    services text COLLATE pg_catalog."default",
    organizer_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT companies_pkey PRIMARY KEY (company_id),
    CONSTRAINT companies_company_name_key UNIQUE (company_name)
);

CREATE TABLE IF NOT EXISTS public.emailverificationlogs
(
    log_id serial NOT NULL,
    user_id integer NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    verification_token character varying(255) COLLATE pg_catalog."default",
    token_expires timestamp without time zone,
    verification_attempt_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    verification_success boolean DEFAULT false,
    ip_address inet,
    user_agent text COLLATE pg_catalog."default",
    CONSTRAINT emailverificationlogs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.event_moderation
(
    moderation_id serial NOT NULL,
    admin_id integer,
    event_id integer,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    reason text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_moderation_pkey PRIMARY KEY (moderation_id)
);

CREATE TABLE IF NOT EXISTS public.event_resources
(
    resource_id serial NOT NULL,
    event_id integer,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    resource_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    file_url character varying(500) COLLATE pg_catalog."default",
    file_size character varying(100) COLLATE pg_catalog."default",
    download_count integer DEFAULT 0,
    is_public boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_resources_pkey PRIMARY KEY (resource_id)
);

CREATE TABLE IF NOT EXISTS public.event_sessions
(
    session_id serial NOT NULL,
    event_id integer,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    session_date date NOT NULL,
    location character varying(255) COLLATE pg_catalog."default",
    speaker_id integer,
    session_type character varying(50) COLLATE pg_catalog."default" DEFAULT 'session'::character varying,
    max_attendees integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_sessions_pkey PRIMARY KEY (session_id)
);

CREATE TABLE IF NOT EXISTS public.event_speakers
(
    speaker_id serial NOT NULL,
    event_id integer,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    title character varying(255) COLLATE pg_catalog."default",
    company character varying(255) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    profile_image character varying(500) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    linkedin character varying(500) COLLATE pg_catalog."default",
    twitter character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_speakers_pkey PRIMARY KEY (speaker_id)
);

CREATE TABLE IF NOT EXISTS public.eventcategories
(
    category_id serial NOT NULL,
    category_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    icon_class character varying(50) COLLATE pg_catalog."default",
    color_code character varying(7) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT eventcategories_pkey PRIMARY KEY (category_id),
    CONSTRAINT eventcategories_category_name_key UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS public.eventcompanies
(
    company_id serial NOT NULL,
    company_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    company_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    category character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address text COLLATE pg_catalog."default",
    contact_info jsonb NOT NULL,
    description text COLLATE pg_catalog."default",
    services text COLLATE pg_catalog."default",
    organizer_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT eventcompanies_pkey PRIMARY KEY (company_id),
    CONSTRAINT eventcompanies_company_name_key UNIQUE (company_name)
);

CREATE TABLE IF NOT EXISTS public.eventfeedback
(
    feedback_id serial NOT NULL,
    event_id integer NOT NULL,
    attendee_id integer NOT NULL,
    rating integer,
    feedback_text text COLLATE pg_catalog."default",
    is_anonymous boolean DEFAULT false,
    helpful_votes integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT eventfeedback_pkey PRIMARY KEY (feedback_id),
    CONSTRAINT eventfeedback_event_id_attendee_id_key UNIQUE (event_id, attendee_id)
);

CREATE TABLE IF NOT EXISTS public.eventregistrations
(
    registration_id serial NOT NULL,
    event_id integer NOT NULL,
    attendee_id integer NOT NULL,
    registration_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    ticket_quantity integer DEFAULT 1,
    total_amount numeric(10, 2),
    payment_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_method character varying(50) COLLATE pg_catalog."default",
    payment_reference character varying(255) COLLATE pg_catalog."default",
    special_requirements text COLLATE pg_catalog."default",
    check_in_status boolean DEFAULT false,
    check_in_time timestamp without time zone,
    qr_code text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'confirmed'::character varying,
    cancellation_reason text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    ticket_type_id integer,
    registration_status character varying(50) COLLATE pg_catalog."default",
    registration_type character varying(50) COLLATE pg_catalog."default" DEFAULT 'standard'::character varying,
    notes text COLLATE pg_catalog."default",
    dietary_restrictions text COLLATE pg_catalog."default",
    accessibility_needs text COLLATE pg_catalog."default",
    qr_generated_at timestamp with time zone,
    qr_data text COLLATE pg_catalog."default",
    CONSTRAINT eventregistrations_pkey PRIMARY KEY (registration_id),
    CONSTRAINT eventregistrations_event_id_attendee_id_key UNIQUE (event_id, attendee_id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    event_id serial NOT NULL,
    organizer_id integer NOT NULL,
    event_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    event_date timestamp without time zone NOT NULL,
    event_time time without time zone,
    end_date date,
    end_time time without time zone,
    venue_name character varying(255) COLLATE pg_catalog."default",
    venue_address text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    ticket_price numeric(10, 2) DEFAULT 0.00,
    event_type character varying(100) COLLATE pg_catalog."default" DEFAULT 'Conference'::character varying,
    category character varying(100) COLLATE pg_catalog."default",
    tags text COLLATE pg_catalog."default",
    image_url character varying(500) COLLATE pg_catalog."default",
    registration_deadline date,
    refund_policy text COLLATE pg_catalog."default",
    terms_and_conditions text COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'draft'::character varying,
    is_public boolean DEFAULT true,
    requires_approval boolean DEFAULT false,
    max_tickets_per_person integer DEFAULT 5,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    max_attendees integer,
    image_filename character varying(255) COLLATE pg_catalog."default",
    image_type character varying(50) COLLATE pg_catalog."default" DEFAULT 'url'::character varying,
    image_size integer,
    image_mimetype character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT events_pkey PRIMARY KEY (event_id)
);

COMMENT ON COLUMN public.events.image_url
    IS 'Either full URL for external images or relative path for local uploads';

COMMENT ON COLUMN public.events.image_filename
    IS 'Original filename for uploaded images';

COMMENT ON COLUMN public.events.image_type
    IS 'Type of image: url (external) or file (local upload)';

COMMENT ON COLUMN public.events.image_size
    IS 'File size in bytes for uploaded images';

COMMENT ON COLUMN public.events.image_mimetype
    IS 'MIME type of uploaded images';

CREATE TABLE IF NOT EXISTS public.eventspeakers
(
    speaker_id serial NOT NULL,
    event_id integer NOT NULL,
    speaker_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    speaker_email character varying(255) COLLATE pg_catalog."default",
    speaker_phone character varying(20) COLLATE pg_catalog."default",
    speaker_bio text COLLATE pg_catalog."default",
    speaker_role character varying(50) COLLATE pg_catalog."default" DEFAULT 'speaker'::character varying,
    company_name character varying(255) COLLATE pg_catalog."default",
    photo_url character varying(500) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT eventspeakers_pkey PRIMARY KEY (speaker_id)
);

CREATE TABLE IF NOT EXISTS public.eventstatistics
(
    stat_id serial NOT NULL,
    event_id integer NOT NULL,
    organizer_id integer NOT NULL,
    total_registrations integer DEFAULT 0,
    total_attendees integer DEFAULT 0,
    total_revenue numeric(12, 2) DEFAULT 0.00,
    average_rating numeric(3, 2) DEFAULT 0.00,
    total_feedback integer DEFAULT 0,
    last_updated timestamp without time zone DEFAULT now(),
    CONSTRAINT eventstatistics_pkey PRIMARY KEY (stat_id)
);

CREATE TABLE IF NOT EXISTS public.eventvendorassignments
(
    assignment_id serial NOT NULL,
    event_id integer NOT NULL,
    vendor_id integer NOT NULL,
    service_type character varying(100) COLLATE pg_catalog."default",
    cost numeric(10, 2),
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    contract_details text COLLATE pg_catalog."default",
    assigned_at timestamp without time zone DEFAULT now(),
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT eventvendorassignments_pkey PRIMARY KEY (assignment_id),
    CONSTRAINT eventvendorassignments_event_id_vendor_id_service_type_key UNIQUE (event_id, vendor_id, service_type)
);

CREATE TABLE IF NOT EXISTS public.eventvendors
(
    vendor_id serial NOT NULL,
    vendor_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    vendor_category character varying(100) COLLATE pg_catalog."default",
    contact_email character varying(255) COLLATE pg_catalog."default",
    contact_phone character varying(20) COLLATE pg_catalog."default",
    address text COLLATE pg_catalog."default",
    rating numeric(3, 2) DEFAULT 0.00,
    price_range character varying(100) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    services_offered text[] COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT eventvendors_pkey PRIMARY KEY (vendor_id),
    CONSTRAINT unique_vendor_name UNIQUE (vendor_name)
);

CREATE TABLE IF NOT EXISTS public.feedback
(
    feedback_id serial NOT NULL,
    event_id integer NOT NULL,
    user_id integer NOT NULL,
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    is_anonymous boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT feedback_pkey PRIMARY KEY (feedback_id),
    CONSTRAINT feedback_event_id_user_id_key UNIQUE (event_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.logs
(
    log_id serial NOT NULL,
    level character varying(20) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    user_id integer,
    CONSTRAINT logs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    user_id integer NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" DEFAULT 'system'::character varying,
    read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    event_id integer,
    metadata jsonb DEFAULT '{}'::jsonb,
    priority character varying(20) COLLATE pg_catalog."default" DEFAULT 'normal'::character varying,
    expires_at timestamp without time zone,
    action_url character varying(500) COLLATE pg_catalog."default",
    is_deleted boolean DEFAULT false,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.organizers
(
    organizer_id serial NOT NULL,
    user_id integer NOT NULL,
    full_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(20) COLLATE pg_catalog."default",
    company_name character varying(255) COLLATE pg_catalog."default",
    company_id integer,
    job_title character varying(255) COLLATE pg_catalog."default",
    business_address text COLLATE pg_catalog."default",
    business_phone character varying(20) COLLATE pg_catalog."default",
    website_url character varying(500) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    experience_years integer,
    specializations text COLLATE pg_catalog."default",
    certifications text COLLATE pg_catalog."default",
    social_media_links json,
    business_license_number character varying(255) COLLATE pg_catalog."default",
    tax_id character varying(255) COLLATE pg_catalog."default",
    bank_account_info json,
    profile_picture_url character varying(500) COLLATE pg_catalog."default",
    verified_organizer boolean DEFAULT false,
    verification_documents json,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    organizer_name character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    company character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT organizers_pkey PRIMARY KEY (organizer_id),
    CONSTRAINT organizers_user_id_key UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    payment_id serial NOT NULL,
    registration_id integer,
    amount numeric(10, 2) NOT NULL,
    payment_method character varying(50) COLLATE pg_catalog."default",
    payment_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_date timestamp without time zone DEFAULT now(),
    transaction_id character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    paystack_reference character varying(255) COLLATE pg_catalog."default",
    paystack_transaction_id character varying(255) COLLATE pg_catalog."default",
    paystack_access_code character varying(255) COLLATE pg_catalog."default",
    currency character varying(3) COLLATE pg_catalog."default" DEFAULT 'GHS'::character varying,
    gateway_response text COLLATE pg_catalog."default",
    channel character varying(50) COLLATE pg_catalog."default",
    fees_breakdown jsonb,
    authorization_code character varying(255) COLLATE pg_catalog."default",
    customer_email character varying(255) COLLATE pg_catalog."default",
    customer_name character varying(255) COLLATE pg_catalog."default",
    customer_phone character varying(20) COLLATE pg_catalog."default",
    event_id integer,
    user_id integer,
    initiated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    paid_at timestamp without time zone,
    verified_at timestamp without time zone,
    metadata jsonb,
    CONSTRAINT payments_pkey PRIMARY KEY (payment_id),
    CONSTRAINT unique_paystack_reference UNIQUE (paystack_reference)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id serial NOT NULL,
    role_name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS public.system_settings
(
    setting_id serial NOT NULL,
    setting_key character varying(100) COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    setting_type character varying(20) COLLATE pg_catalog."default" DEFAULT 'string'::character varying,
    description text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    is_public boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT system_settings_pkey PRIMARY KEY (setting_id),
    CONSTRAINT system_settings_setting_key_key UNIQUE (setting_key)
);

CREATE TABLE IF NOT EXISTS public.tickettypes
(
    ticket_type_id serial NOT NULL,
    event_id integer NOT NULL,
    type_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    price numeric(10, 2) NOT NULL,
    quantity_available integer NOT NULL,
    quantity_sold integer DEFAULT 0,
    description text COLLATE pg_catalog."default",
    benefits text[] COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT tickettypes_pkey PRIMARY KEY (ticket_type_id)
);

CREATE TABLE IF NOT EXISTS public.user_moderation
(
    moderation_id serial NOT NULL,
    admin_id integer,
    user_id integer,
    action character varying(50) COLLATE pg_catalog."default" NOT NULL,
    reason text COLLATE pg_catalog."default",
    duration_days integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone,
    is_active boolean DEFAULT true,
    CONSTRAINT user_moderation_pkey PRIMARY KEY (moderation_id)
);

CREATE TABLE IF NOT EXISTS public.useractivitylogs
(
    log_id serial NOT NULL,
    user_id integer,
    action character varying(255) COLLATE pg_catalog."default" NOT NULL,
    resource_type character varying(100) COLLATE pg_catalog."default",
    resource_id integer,
    details json,
    ip_address inet,
    user_agent text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT useractivitylogs_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    role_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    is_email_verified boolean DEFAULT false,
    email_verification_token character varying(255) COLLATE pg_catalog."default",
    email_verification_token_expires timestamp without time zone,
    email_verified_at timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_login timestamp without time zone,
    password_reset_token character varying(255) COLLATE pg_catalog."default",
    password_reset_token_expires timestamp without time zone,
    account_status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    email_verification_expires timestamp without time zone,
    password_reset_expires timestamp without time zone,
    profile_visibility character varying(20) COLLATE pg_catalog."default" DEFAULT 'everyone'::character varying,
    two_factor_enabled boolean DEFAULT false,
    password_changed_at timestamp without time zone,
    is_deleted boolean DEFAULT false,
    deleted_at timestamp without time zone,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email)
);

COMMENT ON COLUMN public.users.profile_visibility
    IS 'Controls who can see user profile: everyone, attendees_only, private';

COMMENT ON COLUMN public.users.two_factor_enabled
    IS 'Whether two-factor authentication is enabled';

COMMENT ON COLUMN public.users.password_changed_at
    IS 'Timestamp of last password change';

COMMENT ON COLUMN public.users.is_deleted
    IS 'Soft delete flag for account deletion';

COMMENT ON COLUMN public.users.deleted_at
    IS 'Timestamp when account was deleted';

ALTER TABLE IF EXISTS public.admin_activity_logs
    ADD CONSTRAINT admin_activity_logs_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_admin_activity_logs_admin_id
    ON public.admin_activity_logs(admin_id);


ALTER TABLE IF EXISTS public.admin_notifications
    ADD CONSTRAINT admin_notifications_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_admin_notifications_admin_id
    ON public.admin_notifications(admin_id);


ALTER TABLE IF EXISTS public.admin_reports
    ADD CONSTRAINT admin_reports_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.attendance_log
    ADD CONSTRAINT attendance_log_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.attendance_log
    ADD CONSTRAINT attendance_log_registration_id_fkey FOREIGN KEY (registration_id)
    REFERENCES public.eventregistrations (registration_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.attendancelogs
    ADD CONSTRAINT attendancelogs_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_attendance_event_id
    ON public.attendancelogs(event_id);


ALTER TABLE IF EXISTS public.attendancelogs
    ADD CONSTRAINT attendancelogs_registration_id_fkey FOREIGN KEY (registration_id)
    REFERENCES public.eventregistrations (registration_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS attendancelogs_registration_id_key
    ON public.attendancelogs(registration_id);


ALTER TABLE IF EXISTS public.attendancelogs
    ADD CONSTRAINT attendancelogs_scanned_by_fkey FOREIGN KEY (scanned_by)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.attendees
    ADD CONSTRAINT attendees_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS attendees_user_id_key
    ON public.attendees(user_id);


ALTER TABLE IF EXISTS public.backup_logs
    ADD CONSTRAINT backup_logs_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.companies
    ADD CONSTRAINT companies_organizer_id_fkey FOREIGN KEY (organizer_id)
    REFERENCES public.organizers (organizer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_companies_organizer_id
    ON public.companies(organizer_id);


ALTER TABLE IF EXISTS public.emailverificationlogs
    ADD CONSTRAINT emailverificationlogs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_moderation
    ADD CONSTRAINT event_moderation_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.event_moderation
    ADD CONSTRAINT event_moderation_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_event_moderation_event_id
    ON public.event_moderation(event_id);


ALTER TABLE IF EXISTS public.event_resources
    ADD CONSTRAINT event_resources_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_sessions
    ADD CONSTRAINT event_sessions_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_speakers
    ADD CONSTRAINT event_speakers_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventcompanies
    ADD CONSTRAINT eventcompanies_organizer_id_fkey FOREIGN KEY (organizer_id)
    REFERENCES public.organizers (organizer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_eventcompanies_organizer_id
    ON public.eventcompanies(organizer_id);


ALTER TABLE IF EXISTS public.eventfeedback
    ADD CONSTRAINT eventfeedback_attendee_id_fkey FOREIGN KEY (attendee_id)
    REFERENCES public.attendees (attendee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventfeedback
    ADD CONSTRAINT eventfeedback_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventregistrations
    ADD CONSTRAINT eventregistrations_attendee_id_fkey FOREIGN KEY (attendee_id)
    REFERENCES public.attendees (attendee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_event_registrations_attendee_id
    ON public.eventregistrations(attendee_id);


ALTER TABLE IF EXISTS public.eventregistrations
    ADD CONSTRAINT eventregistrations_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_event_registrations_event_id
    ON public.eventregistrations(event_id);


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_organizer_id_fkey FOREIGN KEY (organizer_id)
    REFERENCES public.organizers (organizer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_events_organizer_id
    ON public.events(organizer_id);


ALTER TABLE IF EXISTS public.eventspeakers
    ADD CONSTRAINT eventspeakers_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventstatistics
    ADD CONSTRAINT eventstatistics_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventstatistics
    ADD CONSTRAINT eventstatistics_organizer_id_fkey FOREIGN KEY (organizer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.eventvendorassignments
    ADD CONSTRAINT eventvendorassignments_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventvendorassignments
    ADD CONSTRAINT eventvendorassignments_vendor_id_fkey FOREIGN KEY (vendor_id)
    REFERENCES public.eventvendors (vendor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_feedback_event_id
    ON public.feedback(event_id);


ALTER TABLE IF EXISTS public.feedback
    ADD CONSTRAINT feedback_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_notifications_user_id
    ON public.notifications(user_id);


ALTER TABLE IF EXISTS public.organizers
    ADD CONSTRAINT organizers_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS organizers_user_id_key
    ON public.organizers(user_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT fk_payments_event_id FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_payments_event_id
    ON public.payments(event_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT fk_payments_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_payments_user_id
    ON public.payments(user_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_registration_id_fkey FOREIGN KEY (registration_id)
    REFERENCES public.eventregistrations (registration_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tickettypes
    ADD CONSTRAINT tickettypes_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (event_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_moderation
    ADD CONSTRAINT user_moderation_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.admin_users (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.useractivitylogs
    ADD CONSTRAINT useractivitylogs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

END;