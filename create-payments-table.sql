-- Create payments table for Paystack integration
CREATE TABLE IF NOT EXISTS payments (
    payment_id SERIAL PRIMARY KEY,
    registration_id INTEGER REFERENCES eventregistrations(registration_id) ON DELETE CASCADE,
    event_id INTEGER REFERENCES events(event_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Paystack specific fields
    paystack_reference VARCHAR(255) UNIQUE NOT NULL,
    paystack_transaction_id VARCHAR(255),
    paystack_access_code VARCHAR(255),
    
    -- Payment details
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'GHS',
    payment_method VARCHAR(50),
    payment_status VARCHAR(50) DEFAULT 'pending',
    
    -- Paystack response data
    gateway_response TEXT,
    channel VARCHAR(50),
    fees_breakdown JSONB,
    authorization_code VARCHAR(255),
    
    -- Customer information
    customer_email VARCHAR(255) NOT NULL,
    customer_name VARCHAR(255),
    customer_phone VARCHAR(20),
    
    -- Timestamps
    initiated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    paid_at TIMESTAMP,
    verified_at TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Metadata
    metadata JSONB,
    
    -- Indexes for better performance
    INDEX idx_payments_registration_id (registration_id),
    INDEX idx_payments_paystack_reference (paystack_reference),
    INDEX idx_payments_status (payment_status),
    INDEX idx_payments_user_id (user_id),
    INDEX idx_payments_event_id (event_id)
);

-- Add trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_payments_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_payments_updated_at
    BEFORE UPDATE ON payments
    FOR EACH ROW
    EXECUTE FUNCTION update_payments_updated_at();

-- Add some helpful views
CREATE OR REPLACE VIEW payment_summary AS
SELECT 
    p.payment_id,
    p.paystack_reference,
    p.amount,
    p.currency,
    p.payment_status,
    p.initiated_at,
    p.paid_at,
    e.event_name,
    u.email as user_email,
    u.first_name,
    u.last_name
FROM payments p
JOIN events e ON p.event_id = e.event_id
JOIN users u ON p.user_id = u.user_id;

COMMENT ON TABLE payments IS 'Stores payment transactions processed through Paystack';
COMMENT ON COLUMN payments.paystack_reference IS 'Unique reference generated by Paystack for the transaction';
COMMENT ON COLUMN payments.amount IS 'Payment amount in the specified currency (GHS)';
COMMENT ON COLUMN payments.payment_status IS 'Status: pending, success, failed, abandoned';
COMMENT ON COLUMN payments.metadata IS 'Additional data stored as JSON for flexibility';
